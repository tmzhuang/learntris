#!/usr/bin/env ruby
require "./tetromino.rb"

class LearntrisGame
	def initialize
		# Height and width of table
		@height = 22
		@width = 10
		@table = Array.new(@height) { Array.new(@width)}
		reset_table

		@score = 0
		@cleared_lines = 0

		@active_tetromino = nil
	end

	def to_s
		s = ""
		@table.each do |row|
			row.each_with_index do |c, index|
				if index != 0
					s += ' '
				end
				s += c
			end
			s += "\n"
		end
		s
	end

	def spawn_tetromino(type, loc = nil)
		@active_tetromino = Tetromino.new(type)
		loc ||= [0, (@width - @active_tetromino.size) / 2]
		# active_tetromino_loc determines the location of the top left corner
		# of the bouding box of the active tetromino (size by size large).
		# The default location is to place it on the first row and centered
		# horizontally (rounding down for sizes that are odd).
		@active_tetromino_loc = loc

		@active_tetromino.points.each do |a,b|
			x = a + @active_tetromino_loc.first
			y = b + @active_tetromino_loc.last
			@table[x][y] = @active_tetromino.color.upcase
		end
	end

	def reset_table(c = '.')
		@table.each do |row|
			row.fill(c)
		end
	end

	# Removes tetromino from the board
	def delete_tetromino
		# Iterate over each point of the tetromino and replace with 
		# empty square 
		@active_tetromino.points.each do |a,b|
			x = a + @active_tetromino_loc.first
			y = b + @active_tetromino_loc.last
			@table[x][y] = "."
		end
		# Clears current location
		@active_tetromino_loc = nil
	end

	def move_tetromino(dir)
		loc = @active_tetromino_loc
		type = @active_tetromino.type
		delete_tetromino
		case dir
		when ">"
			if loc.last < @width
				loc[1] += 1
			end
		when "<"
			if loc.last >= 0
				loc[1] -= 1
			end
		when "v"
			if loc.first < @height
				loc[0] += 1
			end
		end
		spawn_tetromino(type, loc)
	end


	# Accepts certain characters as commands:
	# String => nil
	# p: prints current table
	# q: exits program
	# g: reads input and updates table
	# c: clears table
	# ?n: print number of cleared lines
	# ?s: print score
	# s: checks for complete lines and removes them
	# Tetromino.types: "I","S","Z","T","L","J","O", sets
	#   active_tetromino to a new of given type
	# t: prints active_tetromino to screen
	# ): rotates active_tetromino to right by 90 degress
	def handle_command(c)
		case c
		when "p"
			puts to_s
		when "q"
			exit
		when "g"
			read_table
		when "c"
			reset_table
		when "?s"
			puts @score
		when "?n"
			puts @cleared_lines
		when "s"
			update_table
		when *Tetromino.types
			spawn_tetromino(c)
		when ")"
			@active_tetromino.rotate
		when "t"
			puts @active_tetromino.to_s
		when ";"
			puts
		when "P"
			puts to_s
		when ">", "<", "v"
			move_tetromino(c)
		else
			puts "Command " + c + " is invalid"
		end
	end

	# Read table from input
	def read_table
		@table.each_index do |i|
			@table[i] = gets.split(" ")
		end
	end

	# Return true if line is unbroken
	# (in other words, the row does not contain
	# a ".")
	# array => boolean
	def unbroken?(line)
		line.each do |c|
			if c == "."
				return false
			end
		end
		return true
	end

	# Takes an line and fills it with the 
	# same character (defaults ".")
	# array [char] => nil
	def clear(line, c=".")
		line.each_index do |i|
			line[i] = c
		end
	end

	# Checks each row for a complete line.
	# If one is found, it is removed and replaced
	# with an empty line (filled with "."), and
	# increments n by 1, and s by 100
	def update_table
		@table.each do |row|
			if unbroken?(row)
				clear(row)
				@cleared_lines += 1
				@score += 100
			end
		end
	end

	def play
		# Loop forever and gets input
		# ('q' quits the loop)
		while true do 
			inputs = gets.split
			
			# Process input to get an array of single characters (except in the case where
			# commands start with '?').
			inputs.each_index do |i|
				if not (inputs[i].size == 1 or inputs[i][0] == "?")
					inputs[i] = inputs[i].split("")
				end
			end

			# Handle each command in the array
			inputs.flatten.each do |command|
				handle_command command
			end
		end
	end
end

if __FILE__ == $0
	g = LearntrisGame.new
	g.play
end

